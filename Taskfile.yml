version: "3"

vars:
  DEV_DB_OWNER: "0x7E5F4552091A69125d5DfCb7b8C2659029395Bdf"
  DEV_CHAIN_ID: "trufnetwork-dev"
  DEV_NODE_1_ADDRESS: "tn-db-1:8484"
  DEV_NODE_2_ADDRESS: "tn-db-2:8484"
  DEV_NODE_1_RPC_ENDPOINT: "http://{{.DEV_NODE_1_ADDRESS}}"

  # Collection variables for compose files
  SINGLE_STACK_FILES:
    - compose.yaml

  DEVNET_STACK_FILES:
    - deployments/dev-net/devnet-compose.yaml
    - deployments/dev-gateway/dev-gateway-compose.yaml
    - deployments/indexer/dev-indexer-compose.yaml

  DEVNET_GATEWAY_FILES:
    - deployments/dev-gateway/dev-gateway-compose.yaml

  DEVNET_INDEXER_FILES:
    - deployments/indexer/dev-indexer-compose.yaml

  DEVNET_OBSERVER_FILES:
    - deployments/observer/dev-observer-compose.yml

  BINARIES: [ kwild, kwil-cli ]


tasks:
  default:
    desc: List all available tasks (same as task -l)
    cmds:
      - task -l

  # ─── build ───────────────────────────────────────────────────────────────────

  build:bin:
    internal: true
    env:
      TARGET: ./.build
    cmds:
      - for: { var: BINARIES }
        cmd: "SOURCE=./cmd/{{.ITEM}}/main.go ./scripts/build/binary {{.ITEM}}"

  build:
    desc: Build all kwil binaries
    deps: [ build:bin ] # Depends on the loop task

  build:debug:
    desc: Build kwild binary with debug flags
    cmds:
      - go build -gcflags "all=-N -l" -o ./.build/kwild ./cmd/kwild/main.go
  
  build:binaries:
    desc: Download pre-built helper binaries required by compose stacks
    cmds:
      - ./scripts/download-binaries.sh
    sources:
      - ./scripts/download-binaries.sh

  build:binaries:dev:
    desc: Fetch dev-only helper binaries
    deps:
      - build:binaries
    cmds:
      - ./scripts/download-binaries-dev.sh
    sources:
      - ./scripts/download-binaries-dev.sh

  build:benchmark:
    desc: Build benchmark binaries
    cmds:
      - go test -v -c -timeout 0 ./internal/benchmark -o ./.build/benchmark

  # ─── host ─────────────────────────────────────────────────────────────────────

  host:kwild:start:
    desc: Run kwild server
    cmds:
      - .build/kwild start --autogen

  host:kwild:clean:
    desc: Clean kwild server
    cmds:
      - rm -rf ~/.kwild

  host:postgres:start:
    desc: Run a postgres container
    cmds:
      - docker start kwil-postgres || docker run -d -p 5432:5432 --name kwil-postgres -e "POSTGRES_HOST_AUTH_METHOD=trust" kwildb/postgres:latest

  host:indexer:start:
    desc: Run the indexer
    cmds:
      - ./deployments/indexer/kwil-indexer run

  # ─── compose ───────────────────────────────────────────────────────────────────

  # Internal helper task to abstract docker-compose commands.
  # It takes a list of compose FILES and an ACTION (like 'up -d' or 'down')
  # and applies the action to each file in the list.
  _compose:
    internal: true
    requires: { vars: [FILES, ACTION] }
    # common deps
    deps: [ build:binaries ] # Assuming 'build:binaries' fetches necessary external binaries
    cmds:
      - for: { var: FILES }
        cmd: docker compose -f {{.ITEM}} {{.ACTION}}

  single:env:
    desc: Set environment variables for devnet
    internal: true
    env:
      DB_OWNER: "{{.DEV_DB_OWNER}}"
      CHAIN_ID: "{{.DEV_CHAIN_ID}}"
    requires: { vars: [ DEV_DB_OWNER, DEV_CHAIN_ID ] }
  
  single:start:
    desc: Run docker-compose locally (single node stack)
    deps: [ single:env, build:binaries ]
    env:
      DB_OWNER: "{{.DEV_DB_OWNER}}"
      CHAIN_ID: "{{.DEV_CHAIN_ID}}"
    cmds:
      - sh -c 'docker compose -f compose.yaml up -d'
    
  single:stop:
    desc: Shutdown single node environment
    deps: [ single:env ]
    cmds:
      - task: _compose
        vars: 
          ACTION: down
          FILES: { ref: .SINGLE_STACK_FILES }

  # The devnet environment variables are set here and consumed by compose files.
  devnet:env:
    internal: true
    env:
      BACKENDS: "{{.DEV_NODE_1_ADDRESS}},{{.DEV_NODE_2_ADDRESS}}"
      CHAIN_ID: "{{.DEV_CHAIN_ID}}"
      NODE_RPC_ENDPOINT: "{{.DEV_NODE_1_RPC_ENDPOINT}}"
      DB_OWNER: "{{.DEV_DB_OWNER}}"
    requires: { vars: [ DEV_NODE_1_ADDRESS, DEV_NODE_2_ADDRESS, DEV_CHAIN_ID, DEV_DB_OWNER ] } # Added requires guard for all used vars
  
  devnet:start:
    desc: Run docker-compose locally with dev configuration, 2 nodes, gateway, and indexer services
    deps: [ devnet:env, build:binaries ]
    cmds:
      - chmod +x ./.build/kgw
      - task: _compose
        vars: 
          ACTION: up -d
          FILES: { ref: .DEVNET_STACK_FILES }

  devnet:stop:
    desc: Shutdown dev 2 nodes, gateway, and indexer services
    deps: [ devnet:env ]
    cmds:
      - task: _compose
        vars: 
          ACTION: down
          FILES: { ref: .DEVNET_STACK_FILES }

  # These tasks use specific subsets of the devnet compose files (defined in vars)
  # to allow starting/stopping individual components like the gateway or indexer.
  devnet:gateway:start:
    desc: The gateway is not needed for development. However, you might want to test its configuration.
    deps: [ devnet:env, build:binaries ]
    cmds:
      - task: _compose
        vars: 
          ACTION: up -d
          FILES: { ref: .DEVNET_GATEWAY_FILES }

  devnet:gateway:stop:
    desc: Shutdown the gateway
    deps: [ devnet:env ]
    cmds:
      - task: _compose
        vars: 
          ACTION: down
          FILES: { ref: .DEVNET_GATEWAY_FILES }

  devnet:indexer:start:
    desc: Run the indexer against local devnet
    deps: [ devnet:env, build:binaries ]
    cmds:
      - task: _compose
        vars: 
          ACTION: up -d
          FILES: { ref: .DEVNET_INDEXER_FILES }

  devnet:indexer:stop:
    desc: Shutdown the indexer
    deps: [ devnet:env ]
    cmds:
      - task: _compose
        vars: 
          ACTION: down
          FILES: { ref: .DEVNET_INDEXER_FILES }

  devnet:observer:start:
    desc: Run the observer development services (vector, prometheus, grafana)
    deps: [ devnet:env ]
    cmds:
      - task: _compose
        vars: 
          ACTION: up -d
          FILES: { ref: .DEVNET_OBSERVER_FILES }

  devnet:observer:stop:
    desc: Shutdown the observer
    deps: [ devnet:env ]
    cmds:
      - task: _compose
        vars: 
          ACTION: down
          FILES: { ref: .DEVNET_OBSERVER_FILES }

  # ─── tools ───────────────────────────────────────────────────────────────────

  tools:
    desc: Install tools
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.56.2
      - go install github.com/vektra/mockery/v2@v2.42.1

  mockery:
    desc: Generate mocks
    cmds:
      - mockery --all

  lint:
    desc: Run linter
    cmds:
      - golangci-lint run


  # ─── setup ───────────────────────────────────────────────────────────────────

  # After generating the certs, you need to trust them in your local machine by running the task setup:local-cert (linux) or setup:local-cert-darwin (macOS)
  # leave the fields empty and press enter to use the default values
  setup:local-cert:
    desc: Generate a new local cert
    cmds:
      - sudo openssl req -x509 -nodes -days 365 -addext "subjectAltName = DNS:localhost" -newkey rsa:2048 -keyout ./deployments/dev-gateway/certs/localhost.key -out ./deployments/dev-gateway/certs/localhost.crt

  setup:trust-local-cert:
    desc: Trust local certs for development
    cmds:
      - sudo cp ./deployments/dev-gateway/certs/localhost.crt /usr/local/share/ca-certificates/localhost.crt
      - sudo update-ca-certificates

  setup:local-cert-darwin:
    desc: Trust local certs for development in Darwin
    cmds:
      - sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ./deployments/dev-gateway/certs/localhost.crt

  # ─── tests ───────────────────────────────────────────────────────────────────

  test:unit:
    desc: Run unit tests
    cmds:
      - go test ./internal/contracts/tests/...

  coverage:
    desc: Generate HTML & CLI coverage report via scripts/coverage.sh
    cmds:
      - bash ./scripts/coverage.sh


  benchmark:
    desc: Compile & run Go micro-benchmark suite, regenerating ./internal/benchmark report
    cmds:
      - go test -v -timeout 0 ./internal/benchmark

  get-genesis:
    desc: Pull latest staging genesis.json from truf-node-operator (needs READ_TOKEN in .env)
    dotenv: ['.env']
    cmds:
      - |
        curl -f -H "Authorization: token ${READ_TOKEN}" --create-dirs -o ./deployments/network/staging/genesis.json https://raw.githubusercontent.com/trufnetwork/truf-node-operator/main/configs/network/staging/genesis.json

  # ─── actions ───────────────────────────────────────────────────────────────────

  action:migrate:
    desc: Run the migration action for all SQL files. Environment variables should be set in the environment.
    cmds:
      - bash ./scripts/migrate.sh
    env:
      PRIVATE_KEY: "{{.PRIVATE_KEY}}"
      PROVIDER: "{{.PROVIDER}}"
      SYNC: "{{.SYNC}}"
    requires: { vars: [PRIVATE_KEY, PROVIDER] }

  action:migrate:dev:
    desc: Run the migration action for all SQL files in a local network
    cmds:
      - task: action:migrate
        vars: { PRIVATE_KEY: "0000000000000000000000000000000000000000000000000000000000000001", PROVIDER: http://localhost:8484 }